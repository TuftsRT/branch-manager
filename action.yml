name: Branch Manager
author: Tufts University
description: automatically copy content between repository branches

inputs:
  source-branch:
    description: |
      Branch to copy content from. Defaults to the triggering branch.
    required: false
    default: ${{ github.ref_name }}
  destination-branch:
    description: |
      Branch to copy content to.
    required: true
  clear-destination:
    description: |
      Whether to delete all files from the destination branch before copying.
      Must be set to "true" for deletion to occur. Other values ignored.
    required: false
    default: "false"
  copy:
    description: |
      Newline-delimited list of `source|destination` arguments passed to `rsync`
      and executed using archive mode. Source and destination paths are relative
      to the repository root and will default to the repository root if not
      provided or left empty. Commands executed in order provided.
    required: false
    default: ""
  replace:
    description: |
      Newline-delimited list of `find|replace|glob` arguments used to perform
      string replacement in the copied files. Commands are executed using `sed`
      in order provided and applied only to files matching the glob pattern.
      Omitting the glob pattern will apply the replacement to all files.
    required: false
    default: ""
  commit-message:
    description: |
      Message to use when committing changes to the destination branch.
      Defaults to the SHA of the triggering commit.
    required: false
    default: ${{ github.sha }}

runs:
  using: composite
  steps:
    - id: allow-execution
      run: chmod +x ${{ github.action_path }}/*.sh
      shell: bash
    - id: checkout-source
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.source-branch }}
        path: repo
    - id: stage-files
      run: ${{ github.action_path }}/stage-files.sh
      shell: bash
      env:
        REPO: repo
        STAGING: staging
        INPUTS_COPY: ${{ inputs.copy }}
    - id: replace-strings
      run: ${{ github.action_path }}/replace-strings.sh
      shell: bash
      env:
        STAGING: staging
        INPUTS_REPLACE: ${{ inputs.replace }}
    - id: push-changes
      run: ${{ github.action_path }}/push-changes.sh
      shell: bash
      env:
        REPO: repo
        BRANCH: ${{ inputs.destination-branch }}
        CLEAR: ${{ inputs.clear-destination }}
        STAGING: staging
        MESSAGE: ${{ inputs.commit-message }}
